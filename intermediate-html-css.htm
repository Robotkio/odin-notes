<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Intermediate HTML and CSS Course - Odin Notes</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/notes-style.css">
    <script src="js/foldable-sections.js" defer></script>
</head>

<body>
    <div id="foldables">
        <h1>Intermediate HTML and CSS Course Notes</h1>
        <p><strong>Intermediate HTML Concepts</strong> covers Emmet, SVGs and Tables. <strong>Intermediate CSS Concepts</strong> covers Default Styles, Units, more advanced styles and properties, Advanced Selectors, Positioning, CSS Functions, Custom Properties, Browser Compatibility and lastly Frameworks and Preprocessors.</p>
        <section>
            <h2>Intermediate HTML Concepts</h2>
            <p>Emmet is more powerful auto-complete/navigation for Visual Studio Code. SVG is vector graphics. Tables have a few more things to them these days than they used to.</p>
            <section>
                <h3>Emmet</h3>
                <ul>
                    <li>Lot of neat productivity key commands.</li>
                    <li>Key binds are disabled by default, find them in the gear icon in the bottom left, "keyboard
                        shortcuts", search "emmet".</li>
                    <li><a href="https://docs.emmet.io/cheat-sheet/">Emmet Cheat Sheet</a> kind of gigantic, don't think
                        I need much</li>
                    <li><a href="https://marketplace.visualstudio.com/items?itemName=agutierrezr.emmet-keybindings">Emmet
                            Keybindings</a> not mandatory, I've used different ones</li>
                </ul>
            </section>
            <section>
                <h3>SVG</h3>
                <ul>
                    <li>Default sort of svg looking thing:
                        <code class="block">
                            &lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><br>
                            &nbsp;&nbsp;&nbsp;&nbsp;&lt;rect x=0 y=0 width=100 height=50 /><br>
                            &nbsp;&nbsp;&nbsp;&nbsp;&lt;circle class="svg-circle" cx="50" cy="50" r="10"/><br>
                            &lt;/svg>
                        </code>
                    </li>
                    <li><code>xmlns</code> stands for XML NameSpace and mentions what dialect of XML</li>
                    <li><code>viewBox</code> bounds of the SVG, ratio and origin</li>
                    <li><code>class, id</code> act like in</li>
                    <li><code>&lt;circle>, &lt;rect>, &lt;path>, &lt;text></code> building blocks</li>
                    <li><code>fill, strike</code> can be changed in CSS!</li>
                    <li>SVGs can be used linked and inline</li>
                    <li>Good source of <a href="https://fonts.google.com/icons?icon.size=24&icon.color=%231f1f1f">SVG icons</a></li>
                    <li>Another good <a href="https://feathericons.com/">source of SVG icons</a></li>
                    <li>I just realized SVG's could be used to make things like dynamic graphs. Now I see why they're so important.</li>
                </ul>
            </section>
            <section>
                <h3>Tables</h3>
                <ul>
                    <li><mark>Only use tables for structuring tabular data. Only.</mark></li>
                    <li>I basically remember how this works.</li>
                    <li><code>table</code> children are tr, caption, thead, tbody, tfoot</li>
                    <li><code>tr</code> table row, children are td and th</li>
                    <li><code>td</code> table data</li>
                    <li><code>th</code> table header, takes scope, id and headers attributes</li>
                    <li><code>colspan, rowspan</code> does what it says on the tin</li>
                    <li><code>caption</code> captions the table (above by default)</li>
                    <li><code>scope="col"</code> can be added for screen readers to know the scope of the table that the header applies to. also uses <code>"row", "colgroup", "rowgroup"</code> The "-group" tags can denote the, say, group of headings.</li>
                    <li>alternative to scope is <code>id, headers</code> "id" is used for noting what a header is, the "headers" tag is used to tell what headers a "td" is related to</li>
                    <li>for how to use <code>scope, id, headers</code> <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Table_accessibility">check out this tutorial</a></li>
                    <li>Ohhh ... there's also a lot more things to know. I'm going to take further <a href="https://css-tricks.com/complete-guide-table-element/">notes from this variable.</a></li>
                    <li><code>thead, tbody, tfoot</code> <mark>tr is the child of these</mark> not td, th!</li>
                    <li>Key styling aspects: <code>border-spacing: 5px;</code>, <code>border-collapse: collapse</code>, <code>white-space: nowrap</code> can cause data to go outside the table</li>
                    <li>Tables act like a hybrid div/span: they only take up the space they need to like span but place later elements on a new line like div</li>
                    <li>There's a huge <a href="https://www.pencilandpaper.io/articles/ux-pattern-analysis-enterprise-data-tables">article here on table UX</a> (I thought tables were archaic but realize they're as important as excell lol)</li>
                </ul>
            </section>
        </section>
        <section>
            <h2>Intermediate CSS Concepts</h2>
            <p>Default Styles talks about CSS resets. CSS Units goes deep on a lot of different values that you can use to control attributes (especially scale). More Text Styles covers font usage and importing as well as other ways to manipulate how it's displayed. It also has some bits on performance. More CSS Properties covers the core set of, like, six properties that get used a lot. Advanced Selectors covers a lot of selectors, pseudo-classes and pseudo-elements. Positioning covers things like relative and sticky positioning. CSS Functions covers just that (mostly to do with math). Custom Properties covers CSS variables and some information about their inhertiance and usage. Browser Compatibility is "check this website" and "iOS only uses WebKit". Frameworks and Preprocessors just contextualizes their existance.</p>
            <section>
                <h3>Default Styles</h3>
                <ul>
                    <li>This section is mostly about style resets.</li>
                    <li>Good <a href="https://css-tricks.com/reboot-resets-reasoning/">article here</a> on a variety of resets and context for resets as a whole.</li>
                    <li>There's also apparently a <a href="https://cssdeck.com/blog/scripts/vanilla-css-un-reset/">CSS un-reset</a> used for an initial standardization after wiping everything out.</li>
                    <li>More reading <a href="https://mattbrictson.com/blog/css-normalize-and-reset">here</a> and <a href="https://www.joshwcomeau.com/css/custom-css-reset/">here</a> for just ways of thinking about resets.</li>
                </ul>
            </section>
            <section>
                <h3>CSS Units</h3>
                <ul>
                    <li>Absolute units: px, in (inch), cm (centimeter). Of the absolutes, <mark>only use px</mark>.</li>
                    <li>Relative units: em, rem. Both refer to font size, but you can scale more. Lean toward using "rem".</li>
                    <li><code>1em</code> is the <code>font-size</code> of <mark>an</mark> element, or the elements parent if you're using it to set font-size. (ie. if you have something <code>font-size: 16px;</code>, settings its width to <code>4em</code> would make its width 64px. (16 * 4 == 64)</li>
                    <li><code>1rem</code> is the <code>font-size</code> of the <mark>root element</mark> (either :root or html). It means you don't have to keep track of parent size.</li>
                    <li>Viewport units: vh, vw. Refer to viewport height and width. <code>1vh</code> is equal to 1% of the viewport height.</li>
                    <li>Also <code>vmin, vmax</code> for the viewport minimum and maximum. Can set an elements minimum and maximum size related to the viewport.</li>
                    <li>Fun aside: "em" and "rem are like <code>width</code> with "%" and "vw". A percentage width is relative to its parent where a vw width is relative to the window size.</li>
                    <li>Following notes from the <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Values_and_units">MDN page on CSS values and units</a>:</li>
                    <li>CSS uses four numerical value types: integer (55), number (float, 5.5), dimension (has a unit, 55px) and percentage (55%, relative to another value).</li>
                    <li><code>lh, rlh</code> line-height and relative-line-height. Not used to set the line height (that's the <code>line-height</code> property), but to relate the line height to something like a background.</li>
                    <li>Percentages: mostly relative to the parent element</li>
                    <li>Covers number values like HEX <code>#af4, #a6f244</code> RGB values (second with alpha)<code>rgb(255 3 96), rgb(12 12 12 / 0.5)</code></li>
                    <li>There's also <code>hue</code> value type: <code>hwb(188 97% 28%), hsl(188 97% 28%)</code> where the first value is the hue and the second values are whiteness & blackness for hwb and saturation and lightness for hsl.</li>
                    <li>There's also the <code>image</code> value type. That could be <code>url()</code> or something like <code>linear-gradient()</code></li>
                    <li><code>postion</code> value type ueses: <code>top, left, bottom, right, center</code> which represent offsets from the top and left-hand edges of the box.</li>
                    <li>CSS functions are anything with brackets after them. Also include <code>translate(), rotate(), scale()</code></li>
                    <li><code>calc()</code> lets you do math. There are other math functions like <code>min(), max(), clamp(), sin(), cos(), tan()</code></li>
                    <li>Can use things like <code>line-height: calc(1.1em + 0.5vw);</code> to not just adjust with viewport size, but to scale appropriately</li>
                    <li><strong>Sticky footer</strong>: I guess if you're not using flexbox you can make sticky footers by changing the body from <code>height: 100vh;</code> to <code>min-height: 100vh;</code></li>
                    <li><a href="https://css-tricks.com/fun-viewport-units/#aa-fluid-aspect-ratios">This page</a> has a good tip on making fluid aspect ratios for videos.</li>
                    <li>(That last page also has code for a scroll indicator on it, which is cool.)</li>
                </ul>
            </section>
            <section>
                <h3>More Text Styles</h3>
                <ul>
                    <li>Useful font tip to avoid going through the whole font list every time you want to apply a font to an elements text:
                        <code class="block">:root {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;--system-ui: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;<br>
                            }<br>
                            <br>
                            .element {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;font-family: var(--system-ui);<br>
                            }</code>
                    </li>
                    <li>Use fallback fonts rather than imported fonts as a general rule, but it's not a hard rule.</li>
                    <li>There are a few different ways to import a font. You can link it in the HTML (as below) or @import it in the CSS (further below).
                        <code class="block">
                            &lt;link rel="preconnect" href="https://fonts.googleapis.com"><br>
                            &lt;link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><br>
                            &lt;link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet"><br>
                            @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
                        </code>
                    </li>
                    <li><mark>Note</mark>: there's <a href="https://thehackernews.com/2022/01/german-court-rules-websites-embedding.html">an article</a> that reads, "German Court Rules Websites Embedding Google Fonts Violates GDPR"</li>
                    <li>If you download and host your own fonts, use this:
                        <code class="block">@font-face {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;font-family: my-cool-font;<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;src: url(../fonts/the-font-file.woff);<br>
                            }<br>
                            h1 {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;font-family: my-cool-font, sans-serif;<br>
                            }<br></code>
                    </li>
                    <li>Make things <code>font-style: italic;</code> in CSS if you want it italic for visual sake. Save using <code>em</code> for when there's semantic emphasis. I assume the same thing for <code>strong</code>.</li>
                    <li>Also: <code>letter-spacing</code> what it says, <code>line-height</code> same, <code>text-transform</code> has great things like <code>capitalize, uppercase, lowercase</code> Example, EXAMPLE, example. See more <a href="http://developer.mozilla.org/en-US/docs/Web/CSS/text-transform">here</a></li>
                    <li><code>text-shadow</code> for funsies</li>
                    <li>Overflowing text can be controlled with some settings like ...
                        <code class="block">
                            .overflowing {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;white-space: nowrap;<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;overflow: hidden;<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;text-overflow: ellipsis;<br>
                            }
                        </code>
                    </li>
                    <li><a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Text_styling/Fundamentals#web_safe_fonts">Link</a> on websafe fonts here.</li>
                    <li><mark>There's <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Text_styling/Web_fonts">a tutorial I'm supposed to follow here</a> but when I download the file from Font Squirrel there is no woff/woff2 file.</mark></li>
                    <li>Fonts impact UX because the page will often not load until the font is downloaded.</li>
                    <li>If a font is defined but unused it will not be loaded. (Can <code>rel="preload"</code> in a <code>link</code> tag to force it to load)</li>
                    <li>It's suggested to load fonts in a <code>style</code> tag in the <code>head</code> to allow it to discover fonts before the CSS has to load.</li>
                    <li>Wow, there's even stuff about using something like the following code to pre-connect to a fot website to save time. <code>&lt;link rel="preconnect" href="https://fonts.com" crossorigin></code></li>
                    <li>Using self-hosted fonts is, typically, better.</li>
                    <li>WOFF2 has widespread support and offers best compression. Use it unless you can't.</li>
                    <li>Consider fonts without extra glyphs or using something like the <code>unicode-range: U+0000-00FF</code> in the <code>@font-face</code> declaration. The page will only download the font if it uses characters in that range.</li>
                    <li>Chromium browsers block rendering text for up to 3 seconds while waiting for a font. Can use <code>font-display: auto|block|swap|fallback|optional</code> to adjust this.</li>
                    <li>Something like <code>font-size: clamp(1rem, 0.75rem + 1.5vw, 2rem)</code> is great for keeping fonts adjustable to screen size while also setting a minimum and maximum.</li>
                    <li><mark>There's a UX quote</mark>, "Anything from 45 to 75 characters is widely regarded as a satisfactory line length for a single-column page set in a serifed text face in a text size. The 66-character line (counting both letters and spaces) is widely regarded as ideal. For multiple column work, a better average is 40 to 50 characters."<br>We can set <code>max-inline-size: 66ch</code> property (ch being characters).</li>
                    <li>Honestly, <a href="https://web.dev/learn/design/typography">this article</a> goes into good detail.</li>
                </ul>
            </section>
            <section>
                <h3>More CSS Properties</h3>
                <ul>
                    <li><code>background</code> can have a lot of properties, images, clip, color, origin, position, repeat, size.</li>
                    <li><code>border</code> width, style, colour</li>
                    <li><code>border-radius</code> can do weird things, try <code>border-radius: 10% / 50%;</code> (you can use 100% to make a circle, I think)</li>
                    <li><code>box-shadow: 0px 0px 0px 0px inset red</code> (offset-x, offset-y, blur-radius, spread-radius, inset, colour</li>
                    <li><code>overflow</code> visible (flows out), hidden (cut off), clip*, scroll (add scroll bars), auto (basically adds relevant scrolls)</li>
                    <li>clip* from overflow is weird, it comes along with <code>overflow-clip-margin</code> and <code>flow-root</code>, neither of which I really know what it means.</li>
                    <li><code>opacity</code> self explanitory</li>
                    <li>For all of these just check mozilla.org docs</li>
                </ul>
            </section>
            <section>
                <h3>Advanced Selectors</h3>
                <ul>
                    <li><code>main div { }</code> selects all the divs inside main</li>
                    <li><code>main > div { }</code> selects only the direct decendent divs of main</li>
                    <li><code>.group1 + div + div { }</code> will select only the second div after each .group1 element</li>
                    <li><code>.group1 ~ div { }</code> will select all sibling div elements that come after the .group1 element</li>
                    <li><code>p + p { }</code> will select every p with a p before it! (good for adding margins to the top of each p that isn't the first)</li>
                </ul>
                <p>Pseudo-classes: target things that normally exist in HTML</p>
                <ul>
                    <li><code>:focus</code> (when selected) <code>:hover</code> (when under a mouse) <code>:active</code> (currently being clicked)</li>
                    <li><code>:link</code> and <code>:visited</code> for links</li>
                    <li><code>:root</code> is kind of like applying things to the &lt;HTML> tag, for global rules like making everything on the page <code>box-sizing: border-box;</code></li>
                    <li><code>:first-child, :last-child</code> what it says</li>
                    <li><code>:empty</code> is elements with NO children</li>
                    <li><code>:only-child</code> is elements with NO siblings</li>
                    <li><code>:nth-child(), :nth-last-child()</code> picks specific children
                    <code class="block">.item:nth-child(3) /* selects the 3rd element */<br>
                        .item:nth-child(5n) /* selects every 5th element */<br>
                        .item:nth-child(5n + 3) /* selects every 5th element starting with the 3rd element*/<br>
                        .item:nth-child(even) /* every even element */</code>
                    (same thing for nth-last-child() )</li>
                    <li><code>:enabled, :disabled, :checked, :indeterminate</code> are kind of for forms/buttons to see if the element is enabled, disabled or kind of "yet to be checked" (indeterminate).</li>
                    <li><code>:first-of-type, :last-of-type, :only-of-type</code> self explanitory</li>
                    <li><code>:nth-of-type(), :nth-last-of-type()</code> self explanitory</li>
                    <li><code>:target</code> is used to select things that have been the target of a link. Things like <code>href="website.com/page#header"</code> the #header is the target</li>
                    <li><code>:not()</code> can be used on its own or not <code>div:not(.class), :not(div)</code></li>
                </ul>
                <p>Pseudo-elements: target elements that don't normally exist in the markup</p>
                <ul>
                    <li><code>::marker</code> customizes li elements</li>
                    <li><code>::first-letter, ::first-line</code> as on the box</li>
                    <li><code>::selection</code> change the highlighing when someone selects text!</li>
                    <li><code>::before, ::after</code> add extra elements to things on the page with, say, <code>content:</code></li>
                    <li>There are more things <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">on the mozilla site</a>.</li>
                </ul>
                <p>Attribute selectors</p>
                <ul>
                    <li><code class="block">[src] { } /* target any element with an src */<br>
                        img[src] { } /* any img element with an src */<br>
                        img[src="cat.jpg"] { } /* any img with an src exactly like "cat.jpg" */</code></li>
                    <li>You can use regex like selectors to be more fuzzy <code>^=</code> match strings from start <code>$=</code> match strings from end <code>*=</code> match strings anywhere <code>~=</code> selects matching that is space delimited <code>|=</code> is like ~= except dash delimited (-):
                        <code class="block">[class^='aus'] /* any class that begins with "aus" */<br>
                            [src$='.jpg'] /* any class that ends with ".jpg" */<br>
                            [for*='ill'] /* for="bill", for="silly", for="ill" */<br>
                            [rel~='tag'] /* rel="tag nofollow" */</code>
                    </li>
                </ul>
            </section>
            <section>
                <h3>Positioning</h3>
                <ul>
                    <li><code>position: static, relative, absolute, fixed, sticky</code> changes how an element is anchored on the page</li>
                    <li><code>top:, right:, bottom:, left:</code> are set to move an element around</li>
                    <li><code>static</code> is the default styling, it places itself relative to its surrounding elements and settings like top, right, etc... don't affect it.</li>
                    <li><code>relative</code> is like static except top, right, etc... do affect it.</li>
                    <li><code>absolute</code> position is removed from regular flow but will be placed relative to its parent element until something like top, right, etc... is applied, then it's relative to the viewport OR <mark>if the parent element if that elment is not position:static</mark>. (good for captions over images, icons over elements, modals)</li>
                    <li><code>fixed</code> is removed from regular flow and is only relative to the viewport, stays where it is on the screen regardless of scroll</li>
                    <li><code>sticky</code> acts like static until you scroll past them, then they act like fixed elements</li>
                    <li>Fun tip: fixed and sticky cause the element to be re-rendered on scroll. This can cause performance issues. <code>will-change: transform</code> to the positioned element to render it in its own layer so it isn't constantly redrawn</li>
                    <li>Note: it seems like sticky elements can push each other off the screen. This can be used to keep the title of a section on screen until the next sections title bumps it off. See example <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position#examples">on this page</a>.</li>
                    <li>That link also has some weird, fancy stuff with sticky and a lightbulb example. (The sticky elements stay within a box but will attach/detach from their position in the paragraph)</li>
                </ul>
            </section>
            <section>
                <h3>CSS Functions</h3>
                <ul>
                    <li>Anything in css with a () after it is a function. <code>calc(), min(), max(), clamp()</code> are useful.</li>
                    <li><code>rgb(0, 255, 75)</code> or <code>linear-gradient(90deg, blue, red)</code> are examples.</li>
                    <li><code>calc()</code> is useful because it lets you mix units</li>
                    <li><code>min(150px, 100%)</code> takes the smaller of the two values dynamically</li>
                    <li><code>max()</code> does the opposite</li>
                    <li><code>clamp(320px, 80vw, 60rem)</code> I don't quite get clamp, yet, but it basically takes the smallest, ideal and largest values.</li>
                    <li>Complete list of CSS functions is <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units/CSS_Value_Functions">at this link</a>. I'm going to pull out some interesting ones:</li>
                    <li><code>translate(), rotate(), scale(), skew()</code> for dealing in both 2D and 3D, likewise <code>matrix()</code> for doing a bunch of the aformentioned in one function and <code>perspective()</code> for very 3D things</li>
                    <li>Similar to calc() is <code>calc-size()</code> for dealing with intrinsic sizes like auto, fit-content and max-content that calc() doesn't deal with</li>
                    <li><code>round()</code> rounds a number, check docs <code>mod</code> modulus (with same sign as divisor) <code>rem()</code> remainder, with same sign as dividend</li>
                    <li><code>sign(), cos(), tan(), asin(), acos(), atan(), atan2()</code> angle stuff</li>
                    <li><code>pow(), sqrt(), hypot(), log(), exp()</code>power, square-root, hypotenuse, logarithm, exponent? (e raised to a power)</li>
                    <li><code>abs(), sign()</code> absolute, calculates sign (positive, negative)</li>
                    <li>I'm typing out too many of these. There are filter functions like <code>blur(), brightness(), opacity()</code>, common photoshop stuff</li>
                    <li>Colour functions like <code>rgb(), hsl(), lab()</code> and weirders stuff like <code>color-mix()</code> that mixes colours</li>
                    <li>Image functions apply different gradients <code>linear-gradient(), radial-gradient()</code> etc. and stuff like <code>image(), image-set(), cross-fade(), element(), paint()</code> just look them up, they're weird sounding</li>
                    <li>Something called counter functions? <code>counter(), counters(), symbols()</code></li>
                    <li>Shape functions that make ... shapes?</li>
                    <li>"Reference functions are used as a value of properties to reference a value defined elsewhere."</li>
                    <li>Grid and font functions. Easing functions like <code>linear()</code> that interpolates linearly between its points. Also <code>steps(), cubic-bezier()</code></li>
                    <li>Animation functions like <code>scroll(), view()</code></li>
                    <li>Anchor position functions <code>anchor(), anchor-size()</code></li>
                </ul>
            </section>
            <section>
                <h3>Custom Properties</h3>
                <ul>
                    <li>Set and use a CSS variable like so:
                        <code class="block">--modal-border: 1px solid black;<br>
                        [...]<br>
                        border: var(--modal-border, 1px solid);</code>
                    </li>
                    <li><code>var()</code> excepts a second parameter as a backup value if the first doesn't work.</li>
                    <li>Scope is a concern. Declare in <code>:root { }</code> to ensure global scope.</li>
                    <li>The example on their page does an interesting thing:
                        <code class="block">:root.dark {<br>
                        &nbsp;&nbsp;&nbsp;&nbsp;--color-basebg: rgb(18, 18, 18);<br>
                        }<br>
                        root.light {<br>
                        &nbsp;&nbsp;&nbsp;&nbsp;--color-base-bg: rgb(240, 240, 240);<br>
                        }<br>
                        body {<br>
                        &nbsp;&nbsp;&nbsp;&nbsp;background-color: var(--color-base-bg);<br>
                        }
                        </code>
                        Then it has some JS swap classes between elements like the background. Variable stays the same, class changes the context of the scope of that variable.
                    </li>
                    <li>Can use <code>@media (prefers-color-scheme: dark) { :root { --dark-variable: black; } }</code> to query the users browser setting. There is only "light" and "dark" and light is used if nothing is set.</li>
                    <li>If you re-define a custom property inside of a new element, that property is changed for all of its children, too.</li>
                    <li>You can disable custom property inheritance:
                        <code class="block">@property --color-base-bg {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;syntax: "&lt;color>";<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;inherits: false;<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;initial-value: rgb(18, 18, 18);<br>
                        }
                        </code>
                        So in this case, if a parent re-defines <code>--color-base-bg</code> then the children won't be affected by it.
                    </li>
                    <li>If you set the initial-value in the @property then you can kind of use that as the fallback.</li>
                    <li>Normally if you mess up something then CSS will fallback to the last legal value of something. However take this code as an example:
                        <code class="block">:root {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;--text-color: 16px;<br>
                        }<br>
                        p {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>
                        }<br>
                        p {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;color: var(--text-color);<br>
                        }
                        </code>
                        In this case the words in p-tags will be black. It will not fall back to blue because CSS will thing that a var will be a valid value. (Using the @property and initial-value: will help avoid this)
                    </li>
                </ul>
            </section>
            <section>
                <h3>Browser Compatibility</h3>
                <ul>
                    <li>There's <a href="https://caniuse.com/webp">a website, caniuse.com</a>, that lets you check if you can use a certain feature with a certain browser.</li>
                    <li><mark>iOS and iPadOS exclusively use WebKit/Safari</mark></li>
                    <li>When emulating other devices in Chrome all you're doing is changing screen size, not rendering engine.</li>
                </ul>
            </section>
            <section>
                <h3>Frameworks and Preprocessors</h3>
                <ul>
                    <li>Used in the workplace to speed up CSS development.</li>
                    <li>Some listed frameworks are Boostrap, Tailwind, Bulma, and Foundation.</li>
                    <li>Odin is not going deep on frameworks because it's better to know fundamentals.</li>
                    <li>Preprocessors kind of compile a slightly different version of CSS into CSS to make it easier to do some things.</li>
                    <li>Some preprocessors are SASS, LESS and Stylus.</li>
                </ul>
            </section>
        </section>
        <section>
            <h2>Forms</h2>
            <p>Form Basics covers a lot of ground because forms are both very important and hard to style. Form Validation covers basic, client-side, HTML validation options. (Also some basic UX/UI stuff)</p>
            <section>
                <h3>Form Basics</h3>
                <ul>
                    <li>The form tag should always wrap a form. It dictates what to do with the data in the "action" attribute and what type of request method with the "method" attribute.
                        <code class="block">&lt;form action="example.com/path" method="post"><br>
                            &lt;/form></code>
                    </li>
                    <li><code>&lt;input type="text"></code> The input element is the most versatile and the type attribute tells the browser what type of data is in it and how to render the input.</li>
                    <li><code class="block">&lt;label for="first_name">First Name:&lt;/label><br>
                        &lt;input type="text" id="first_name">
                    </code>
                    The label element contextualizes an input and should be linked to that elements "id" attribute with the labels "for" attribute.</li>
                    <li><mark>Note</mark>: label elements are clickable by default and will focus on their related form element!</li>
                    <li><code>placeholder="Bob"</code> could go in an input to give it example input</li>
                    <li>Inputs should always have a <code>name=""</code> attribute. While the "id" attribute identifies the element on the page and for CSS the "name" attribute identifies the data within the input when it's sent somewhere.</li>
                    <li>Form elements don't need to be in a form if they're not communicating with a server.</li>
                    <li>Some different types:
                        <code class="block">type="email" // will display a keyboard with an @ on mobile devices <br>
                        type="password" // will hide what is displayed behind *'s or something <br>
                        type="number" // will only take number inputs and ignore the rest <br>
                        type="date" // will render a date picker calendar</code>
                    </li>
                    <li><code>&lt;'textarea rows="20" cols="60">Initial content&lt;textarea></code> isn't an input but creates a box for inputting data.</li>
                    <li>Take the creation of a dropdown menu:
                        <code class="block">&lt;select name="Car"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;optgroup label="Gas"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option value="mercedes">Mercedes&lt;/option><br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/opgroup><br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;opgroup label="Electric"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option value="tesla" selected>Tesla&lt;/option><br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&lt;/opgroup><br>
                    &lt;select></code>
                    It's a select tag. You can optionally group things within the list with optgroup tags. Option tags dictate the option text and the values they will submit with the form. You can also designate a default selected option with the selected attribute.</li>
                    <li>When there are five or fewer options to chose from it's often better to display them with radio buttons:
                        <code class="block">&lt;input type="radio" id="child" name="ticket_type" value="child"><br>
                            &lt;label for="child">Child&lt;/label><br>
                            &lt;input type="radio" id="adult" name="ticket_type" value="adult" checked><br>
                            &lt;label for="adult">Adult&lt;/label></code>
                        A user can only check one radio button within the same "name" attribute. You can use the "checked" attribute to start one of the options checked off.
                    </li>
                    <li>Checkboxes are pretty much idential to radio buttons except the type needs to be "checkbox" you can select more than one.</li>
                    <li>Check boxes can also be used individually for, say, a yes/no question like "sign up to recieve emails".</li>
                    <li><mark>Note:</mark> in the code example of radio button the Odin Project version had div tags wrapping each input/label pair. I removed that for brevity of example but I think that's probably a "best practice" sort of thing. An <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Your_first_form">MDN tutorial</a> wraps pairs in p tags and further suggests lists are good, too.</li>
                    <li><code>&lt;button></code> elements have three form specific types: "submit", "reset" and "button". By default a submit button will attempt to send the form data to the location in the action attribute of the form tag. The reset button will clear all elements to their default state.</li>
                    <li>A button without a type specified is, by default considered a "submit" button. <mark>If you don't want a button to default to this behaviour you need to set it to type="button"</mark> that does nothing.</li>
                    <li>You can use the <code>&lt;fieldset></code> element to group things. (Kind of like a wrapping div)</li>
                    <li>A <code>&lt;legend></code> tag <mark>should come right after</mark> a fieldset to denote what that set of fields is.</li>
                    <li>There's <a href="https://moderncss.dev/pure-css-custom-checkbox-style/">a good article here</a> on how to style checkboxes (because it's not that simple).</li>
                    <li>Can use <code>accent-color:</code> style to colour a checkbox</li>
                    <li>Taking a look at <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms#introductory_guides">the MDN</a>, there also <code>output, meter, progress</code> tags.</li>
                    <li><mark>Don't nest a form inside a form</mark></li>
                    <li>Because forms use <code>input</code> for almost everything, it makes it harder to style. Use <code>.form-class-name input[type="email"] { }</code> or something similar to diferentiate.</li>
                    <li>You also have to remember to style <code>:valid, :invalid, :disabled</code> pseudo-classes</li>
                    <li><code>&lt;fieldset></code> apparently doesn't support flexbox, but you can apparently kind of get away with similar functionality by using <code>float: left;</code> on elements that you want to be beside one-another and <code>display: block;</code> on elements you want to be on its own row (like the label)</li>
                    <li>Keep CSS for <code>&lt;select></code> elements sparse because different browsers display it in very functionally different ways.</li>
                    <li>You can disable textarea resizing with <code>resize: none</code>.</li>
                    <li>I've now seen it's totally legal to wrap a form element like a checkbox inside of its label element to keep them together.</li>
                </ul>
            </section>
            <section>
                <h3>Form Validation</h3>
                <ul>
                    <li><code>required</code> on an input will do just that (usability guidelines suggest andding a * to denote which fields are required)</li>
                    <li><code>minlenth="3"</code> and <code>maxlength="20"</code> are the valid number of characters</li>
                    <li>input type=""'s: <code>date, month, week, time, datetime-local, number, range</code> see <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/max#syntax">MDN docs</a> can take <code>min="", max=""</code></li>
                    <li><code>pattern=""</code> takes regex, it's useful to use placeholder="" to give an example sometimes</li>
                    <li>You can automatically style valid and invalid form entries with CSS pseudo-classes <code>:invalid, :valid</code></li>
                    <li>This is all the basic validation that HTML offers, anything else will have to be done with JS</li>
                    <li>There are other pseudo-classes like <code>:user-valid, :in-range</code></li>
                </ul>
                <p>Various Form UX/UI Stuff</p>
                <ul>
                    <li>There are input type=""'s that are actually outputs:</li>
                    <li><code>output</code> say, the result of a calculation</li>
                    <li><code>progress</code> progress bar with "value" and "max" attributes</li>
                    <li><code>meter</code> scale that changes between green, amber and red depending on values of <code>value, min, max, low, high, optimum</code> attributes</li>
                    <li>Credit card best practice: use a text input but set the inputmode="numeric" so that there isn't increment and decrement buttons and add <code>autocomplete="cc-number"</code> to suggest any pre-configured cards</li>
                    <li>You can stop form validation with <code>novalidate</code> attribute to the form tag or add <code>formnovalidate</code> to the submission button/image.</li>
                    <li>Here's a list of relevant form pseudo-classes to style elements:
                        <code class="block">:focus, :focus-within, :focus-visible, :required, :optional, :valid, :invalid, :user-valid, :user-invalid, :in-range, :out-of-range, :disabled, :enabled, :read-only, :read-write, :checked, :indeterminate, :default</code>
                        and you can set placeholder style with <code>::placeholder</code> pseudo-element.
                    </li>
                    <li><a href="https://www.silocreativo.com/en/css-rescue-improving-ux-forms/">Form UI Suggestions</a></li>
                    <li>Other good <a href="https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-form-validation">UX/UI Links on the Odin Page</a></li>
                </ul>
            </section>
        </section>
        <section>
            <h2>Grid</h2>
            <p>Introduction to Grid covers just review. Creating a Grid focuses on Grid foundations and default behaviours. Positioning Grid elements goes over how to assign positions to items adhering to a grid.</p>
            <section>
                <h3>Introduction to Grid</h3>
                <ul>
                    <li>This was just review of flexbox and a comparison to Grid as an idea. Some good contextual links in the course.</li>
                </ul>
            </section>
            <section>
                <h3>Creating a Grid</h3>
                <ul>
                    <li>It's just <code>display: grid;</code> or <code>display: inline-grid</code> like flex.</li>
                    <li><code>display: inline-grid;</code> makes the grid act like an inline element and not a block element.</li>
                    <li>Only direct children become grid items, like flex.</li>
                    <li>Add <code>grid-template-columns:</code> and <code>grid-template-rows:</code></li>
                    <li>Templates take set of numbers after them. For instance three numbers like <code>50px 50px 50px</code> after grid-template-columns will make three columns that are 50px wide.</li>
                    <li>Can do <code>grid-template: 10px / 20px 10px;</code> to make a 1-row, 2-column grid.</li>
                    <li>Take a HTML example like this:
                        <code class="block">
                            &lt;ul class="grid-class"><br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&lt;li>Item 1&lt;/li><br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&lt;li>Item 2&lt;/li><br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&lt;lr>Item 3&lt;/li><br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&lt;li>Item 4&lt;/li><br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&lt;li>Item 5&lt;/li><br>
                            &lt;/ul>
                        </code>
                        and CSS like this:
                        <code class="block">
                            grid-class {<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;display: grid;<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;grid-template: 10px 10px / 10px 10px;<br>
                            }
                        </code>
                        It would create a 2x2 grid with the fifth item outside of it on a new row. It implicitly creates new portions of grid.
                    </li>
                    <li>Use <code>grid-auto-rows: 10px;</code> and <code>grid-auto-columns: 10px;</code> to set the default size of items that fall outside the grid because the definitions from grid-template or grid-template-rows or grid-template-columns are not used here.</li>
                    <li>By default, new <mark>items outside the grid will be placed on new rows and not columns.</mark> but you can change that behaviour with <code>grid-auto-flow: column;</code> and use the <code>grid-auto-columns: n;</code> property.</li>
                    <li>You can use <code>gap, row-gap, column-gap</code> to set the gap between objects.</li>
                    <li>Good troubleshooting options at <a href="https://developer.chrome.com/docs/devtools/css/grid/">this link</a>.</li>
                </ul>
            </section>
            <section>
                <h3>Positioning Grid Elements</h3>
                <ul>
                    <li>"Tracks" are shorthand for a single row or column.</li>
                    <li>"Lines" are the created on either side of a track.</li>
                    <li>"Cells" are the areas between lines.</li>
                    <li>
                        <code class="block">
                            grid-column-start: 1;<br>
                            grid-column-end: 6;<br>
                            grid-row-start: 1;<br>
                            grid-row-end: 3;
                        </code>
                        These define which cells an area takes up. In this case the area would range from column 1-6 and from row 1-3. Kind of like merging cells in excell except I'm pretty sure they can overlap.
                    </li>
                    <li>You can use shorthand for the aformentioned: <br>
                        <code class="block">grid-column: 1 / 6;<br>
                        grid-row: 1 / 3;</code></li>
                    <li>Even more concise is <code>grid-area: 1 / 1 / 3 / 6;</code> that goes row-start, col-start, row-end, col-end.</li>
                    <li>There's also another way that involves more setup, but a lot more simple payoff.
                        <code class="block">grid-template-areas: "one one two"<br>
                            "one one two"<br>
                            "four three three";
                        </code>
                        This names individual cells in a 3x3 grid. You can assign those names like <code>grid-area: three;</code> and an item will exist in the bottom-center and bottom-right cells of the grid.
                    </li>
                    <li>Instead of names in grid-template-areas you can use a <code>.</code> to designate an empty or unnamed cell.</li>
                    <li>From Grid Garden: I learned that you can do something like <code>grid-column-end: span 2;</code> to just span two columns.</li>
                </ul>
            </section>
            <section>
                <h3>Advanced Grid Properties</h3>
                <ul>
                    <li>I don't know if this can be used elsewhere, but they brough up <code>resize: both</code> as a CSS attribute and it lets you resize a grid.</li>
                    <li>
                        <code class="block">grid-template-rows: 10px 10px;<br>
                        grid-template-columns: 10px 10px 10px 10px 10px;</code>
                        can be rewritten as:
                        <code class="block">grid-template-rows: repeat(2, 10px);<br>
                        grid-template-columns: repeat(5, 10px);</code>
                        so that's pretty neat
                    </li>
                    <li><code>fr</code> is a unit, it stands for "fractional unit". If a grid is 400px wide and has four items, all set as 1fr as their size, they will all be 100px.</li>
                    <li>can do weird things like:
                        <code class="block">grid-template-columns: repeat(2, 2fr) repeat(3, 1fr);</code>
                        and the first two columns will be twice as wide as the last three <mark>if they have the space to epxand into</mark>, otherwise they will be at some minimum size
                    </li>
                    <li>you can, of course, mix and match unit in repeat()</li>
                    <li>the minimum size is equal to the space the children in the items takes up</li>
                    <li>can also use the <code>min-content</code></li>
                    <li> useufl fun stuff ahead
                        <code class="block">grid-template-rows: repeat(2, min(200px, 50%));<br>
                        grid-template-columns: repeat(5, max(120px, 15%));</code>
                        so the two rows will take up 50% of the space each or be at most 200px high while the columns will be at least 120px wide or take up 15% each.
                    </li>
                    <li>You can use the <code>minmax()</code> CSS function with only these properties:
                        <code class="block">grid-template-columns <br>
                        grid-template-rows <br>
                        grid-auto-columns <br>
                        grid-auto-rows</code>
                        it's used like: <br>
                        <code>grid-template-columns: repeat(5, minmax(150px, 200px));</code>
                        this will cause the grid items to shrink down to 150px and grow up to 200px.
                    </li>
                    <li><code>clamp()</code> can also be used here:
                        <code class="block">
                            grid-template-columns: repeat(5, clamp(150px, 20%, 200px));
                        </code>
                        to act like minmax() but it can be used outside of grid. It will similarly not shrink below 150px or gro above 200px but will also try and take up 20% of the space. <mark>it's good practice to use a variable size for the middle value of clamp()</mark>
                    </li>
                    <li><code>auto-fit</code> is a value that can be placed specifically in <code>repeat()</code> and it returns "the largest possible positive integer" without grid items overflowing their container. It lets you do things like: <br>
                    <code>grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));</code><br></li>
                    <li>This will create a dynamic number of columns by taking the width of the container and seeing how many times 150px will fit in it. It will then scale up the columns to the max value, in this case 1fr, to fit the column.</li>
                    <li>Honestly it seems to make it dynamic like Flex but it keeps everything in a grid.</li>
                    <li><code>auto-fit</code> works in a very similar way but it's more for when there are fewer items than will fill the grid area. It will scale the grid items to their max size.</li>
                    <li><mark>I'll summerize this for myself:</mark> <br>
                        <code>auto-fit</code> and <code>auto-fill</code> are used as the first argument in the <code>repeat()</code> CSS function. The first argument defines how many times to repeat, say, the number of columns and the second argument is how big the columns are. For example: <br>
                        <code>grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));</code> <br>
                        Say there's a grid that's 500px wide, it has two items in it and the above code is in the grid. With "auto-fit", auto-fit will be the value 2 and minmax will chose 1fr which will resolve to 250px, making a grid of two columns of 250px. With "auto-fill", auto-fill will be the value 3, minmax will chose 1fr which will resolve to ~167px, making the grid three columns 167px wide.
                    </li>
                    <li>There's great stuff on <a href="https://css-tricks.com/snippets/css/complete-guide-grid/#aa-css-grid-properties">css-tricks.com</a> that covers all the grid properties with examples.</li>
                    <li></li>
                    <li></li>
                    <li></li>
                    <li></li>
                </ul>
            </section>
        </section>
    </div>
</body>

</html>