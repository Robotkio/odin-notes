<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Odin Project Notes</title>
    <link rel="stylesheet" href="css/style.css">
    <script src="js/func.js" defer></script>
</head>
<body>
    <nav>
        <ul>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li><a href="intermediate-html-css.htm">Intermediate HTML and CSS Course Notes</a></li>
        </ul>
    </nav>
    <div class="main-content">
        <h1>Odin Project Notes</h1>

        <p>I realized there are thing that I learn in the Odin Project that I both don't exercise immediately and are new to me. I want to be able to remember these things so I'm going to start keeping this document as a form of notes.</p>

        <p>Much of the program I've already completed so the part that I actually take notes in is going to be, I think, a little bit all over the place.</p>

        <!-- Javascript Basics -->
        <div class="section">
            <div class="section-title">
                <h2>Javascript Basics</h2>
                <span class="section-arrow">&#9660;</span>
            </div>
            <div class="section-content">

                <!-- SECTION - Data Types and conditionals -->
                <div class="section">
                    <div class="section-title">
                        <h3>Data Types and Conditionals</h3>
                        <span class="section-arrow">&#9660;</span>
                    </div>
                    <div class="section-content"></div>
                        <code class="block">"1" + 1 + 1 = "111"<br>
                            1 + "1" + 1 = 3<br>
                            1 + ("1" + 1) = 12
                        </code>
                    </div>
                </div> <!-- /SECTION - Data Types and conditionals-->

                <h4>Knowledge Check</h4>
                <div class="q-card">
                    <div class="question">
                        What are the eight data types in JavaScript?
                    </div>
                    <div class="answer">
                        String, number, <del>NaN</del>, bigInt, Undefined, Object, null and something else that is a name a thing has so things like "isa()" will work.
                        <div class="correction">
                            The last thing I was thinking of was "symbol". Also NaN isn't one, I forgot boolean.
                        </div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">Which data type is NOT primitive?</div>
                    <div class="answer">
                        String, Object and symbol are not primitive as far as I know.
                        <div class="correction">Object is the only non-primitive data type. I guess that's because strings are arrays and symbols may be like an enum?</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the relationship between null and undefined?</div>
                    <div class="answer">
                        If I look at a variable as being two things: a bucket that's designed to fit a specific thing and a name for that bucket. A <code>number</code> variable fits a <code>number</code> and is called by its variable name. The <code>null</code> keyword denotes that a variable has a bucket, but nothing is in it, yet. The <code>undefined</code> keyword means the variable has a name, but it doesn't even have a bucket yet.
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the difference between single, double, and backtick quotes for strings?</div>
                    <div class="answer">
                        Single and double are interchangeable. Backtick quotes allow you to place code into strings like <code>let string = `my name is ${name}!`</code> and the <code>name</code> variable will be inserted in.
                        <div class="correction">Backtick strings are called "template literals". <mark>They can also be declared over multiple lines!</mark></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the term for joining strings together?</div>
                    <div class="answer">
                        Concatination. I'm not certain if concatination is better in JavaScript or for big things you want a string builder like in Java.
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">Which type of quote lets you embed variables/expressions in a string?</div>
                    <div class="answer">
                        Backtick quotes.
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">How do you embed variables/expressions in a string?</div>
                    <div class="answer">
                        See "the differences between single, double and backtick quotes" question.
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">How do you use escape characters in a string?</div>
                    <div class="answer">
                        <del>Forward slash. <code>let string = "he said /"hello/""</code></del>
                        <div class="correction">It's actually backslash! It's also important to know that when it comes to quotes, you can use the non-declared type inside of the declared one without escaping it. <code>let string = `He said, "I'm OK."`;</code> is valid.</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the difference between the slice/substring string methods?</div>
                    <div class="answer">
                        Oooh, not sure. I think substring lets you pick a point in a string and grab a certain number of characters but I'm not sure about slice. I'm guessing you pick a point and it cuts off everything before that.
                        <div class="correction">I was somewhat right, at least about substring. Both can take a start and end value and will return the characters between those two. Both can ignore the end value and it will just return from the chosen point to the end. <note>Slice can be given negative values and it will count from the end of the string.</note></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What are the three logical operators, and what do they stand for?</div>
                    <div class="answer">
                        I assume this is asking for <code>== && ||</code> which stand for equals, and, or, respectively.
                        <div class="correction">It's not <code>==</code>, it's <code>!</code>. I can't believe I forgot that one.</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What are the comparison operators?</div>
                    <div class="answer">
                        Not sure, I think that's <code>== ===</code> which are "equal value" and "equal value and type" respectively.
                        <div class="correction">I also entirely neglected <code>> >= < <= !=</code>.</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What are truthy and falsy values?</div>
                    <div class="answer">
                        I think that's something like non-zero values default to evaluating to true and 0 values default to being false. A null object would be false, but a string like <code>"false"</code> would be true because it contains values.
                        <div class="correction">Close but incomplete. <code>0, "", null, undefined, NaN, false</code> all evaluate to false. Everything else evaluates to true.</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What are the falsy values in JavaScript?</div>
                    <div class="answer">
                        See above.
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What are conditionals?</div>
                    <div class="answer">
                        I assume that means if/else and switch statements.
                        <div class="correction">Also else if, technically.</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the syntax for an if/else conditional?</div>
                    <div class="answer">
                        <code class="block">if (condition) {<br>&nbsp;&nbsp;&nbsp;&nbsp;//code<br>} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;//code<br>}</code>
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the syntax for a switch statement?</div>
                    <div class="answer">
                        <code class="block">switch (variable) {<br>case case1:<br>&nbsp;&nbsp;&nbsp;&nbsp;//code<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>case case2:<br>&nbsp;&nbsp;&nbsp;&nbsp;//code<br>default:<br>&nbsp;&nbsp;&nbsp;&nbsp;//code<br>}</code>
                        And this lets case2 also run whatever is in default because it doesn't have a <code>break;</code> statement.
                        <div class="correction">I forgot the keyword "case" infront of the cases.</div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is the syntax for a ternary operator?</div>
                    <div class="answer">
                        <code class="block">conditional ? case_true : case_false;</code>
                        <div class="correction"></div>
                    </div>
                </div>

                <div class="q-card">
                    <div class="question">What is nesting?</div>
                    <div class="answer">
                        It's what happens when code exists "inside" other code. Like an if statement inside another if statement is considered nested.
                        <div class="correction"></div>
                    </div>
                </div>

                <!-- JavaScript Developer Tools -->
                <h3>JavaScript Developer Tools</h3>

                <ul>
                    <li>There's some good tips for logging things in the console <a href="https://www.youtube.com/watch?v=xkzDaKwinA8">in this video</a>.</li>
                    <li>They're called methods when they're a part of an object and functions outside of an object.</li>
                    <li>JS has default parameters now <code>function fun(variable = "default) {}</code></li>
                    <li>JS does the anonymous function thing which is cool. Default function formatting can be replaced by "arrow functions". So rather than the above code it could be <code>(variable) => { };</code> Or, fun fact:
                    <code class="block">let f = item => item * 2</code> is the same as
                    <code class="block">let f = function doubleItem(item) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return item * 2;<br>}</code></li>
                    <li>Weird, useful thing: <code>text = text || "default";</code> will assign <code>text</code> a value if it's falsy.</li>
                    <li>"let" vs "var". "let" works like I expect it to, scope-wise. "var", for some reason, scopes out one level. Use "let" for consistency.</li>
                </ul>

                <div class="q-card">
                    <div class="question">What is the difference between a function declaration and a function expression?</div>
                    <div class="answer">
                        A function declaration is kind of the normal, top-level way of writing out a function. A function expression is when you write out a function as a part of a variable assignment. <code>let sum = function(a, b) { return a + b; };</code> This function doesn't exist until this line of code is called. That's what a function expression is. A defined function can be called before its definition because it's created earlier.
                        <div class="correction"></div>
                    </div>
                </div>

                <!-- Arrays and Loops -->
                <h3>Arrays and Loops</h3>

                <p>Array notes...</p>
                <ul>
                    <li>Arrays are objects (typeof)</li>
                    <li><code>array.push(element);</code> to add an element</li>
                    <li>JS does not support arrays with named indexes (aka associative arrays). Only numbered indexes. (Objects use named indexes. Which is ironic since arrays "are" an object.)</li>
                    <li>I think you can duplicate an array with <code>let newArray = new Array(oldArray);</code></li>
                    <li>Don't use <code>typeof</code> to see if something is an array, use <code>Array.isArray(arrayName);</code> or <code>arrayName instanceof Array;</code></li>
                    <li><code>arrayName.pop()</code> removes and returns the last element</li>
                    <li><code>arrayName.shift()</code> removes and returns the first element</li>
                    <li><code>arrayName.push()</code> adds an element to the end</li>
                    <li><code>arrayName.unshift()</code> adds an element to the front</li>
                    <li><code>arrayName.join("x")</code> returns a string of all the elements of the array with whatever value is given between them. Code here would give something like <code>1*2*3</code></li>
                    <li><code>arrayName.concat(otherArray1, otherArray2, ...)</code> to combine arrays (unlimited arguments)</li>
                    <li>More stuff at <a href="https://www.w3schools.com/js/js_array_methods.asp">W3Schools</a> but those seem like the majority</li>
                </ul>

                <p>Loop notes...</p>
                <ul>
                    <li><code>for (const item of collection) { }</code> "for...of" loop</li>
                    <li><code>const newArray = oldArray.map(function);</code> .map performs the function on each element of the array and then returns the modified verson of the array. The function must return the modified value</li>
                    <li><code>const newArray = oldArray.filter(function);</code> .filter will perform the function but the function must return true or false and only true elements will be returned (ie. function checks if each element starts with the letter "L")</li>
                </ul>

                <!-- DOM Manipulation and Events -->
                <h3>DOM Manipulation and Events</h3>

                <h4>DOM methods</h4>
                <ul>
                    <li><code>document.querySelector(".controls");</code> gets the first instance of the .controls class.</li>
                    <li><code>document.querySelectorAll(".controls");</code> gets all the instances of .controls classes.It is NOT an Array, however, it's a NodeList. I can use <code>Array.from(nodeList)</code> to convert it to an array or use the "<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread operator</a>" which I'm not familiar with, yet.</li>
                    <li>Can create elements with <code>document.createElement(tagName, [options])</code> which allows me to modify it before adding it to the DOM</li>
                    <li><code>parentNode.appendChild(childNode)</code> appends childNode as the last child of parentNode</li>
                    <li><code>parentNode.insertBefore(newNode, referenceNode)</code> inserts newNode into parentNode before ReferenceNode</li>
                    <li><code>parentNode.removeChild(child)</code> emoves child from parentNode on the DOM and returns a reference to child</li>
                    <li>I can modify those created elements more easily like so:
                        <code class="block">const myDiv = document.createElement("div");<br>
                            myDiv.style.color = "blue";<br>
                            div.style.cssText = "color: blue; background: white;";<br>
                            div.setAttribute("style", "color: blue; background: white;");</code>
                    </li>
                    <li>When accessing properties that have a "-" in them you can't use a dash. There are alternatives, though:
                        <code class="block">div.style.<mark>background-color</mark>; // this doesn't work<br>
                            div.style.backgroundColor; // camelCase works<br>
                            div.style["background-color"]; // bracket notation works!<br>
                            div.style["backgroundColor"]; // camelCase inside brackets works</code>
                    </li>
                    <li>I can CRUD <mark>attributes</mark>
                        <code class="block">div.setAttribute("id", "theDiv"); // adds and updates<br>
                            div.getAttribute("id");<br>
                            div.removeAttribute("id");</code>
                    </li>
                        <li>I can add, remove and toggle <mark>classes</mark>. "Toggle" meaning add it if it doesn't have it already or remove it if it has the class already.
                        <code class="block">div.classList.add("newClass");<br>
                            div.classList.remove("newClass");<br>
                            div.classList.toggle("newClass");</code>
                        They say it's cleaner to toggle for some reason rather than adding and removing inline CSS.
                    </li>
                    <li>If you just want to add text, use <code>myDiv.textContent = "Text!";</code></li>
                    <li>If you want to add HTML, use <code>myDiv.innerHTML = "&lt;span&gt;Text!&lt;/span&gt;";</code> but doing that is a bit less secure than using textContent.
                    </li>
                </ul>

                <h4>Events</h4>

                <ul>
                    <li>Two methods of adding functionality on click:
                        <code class="block">btn.onclick = functionName;<br>
                        btn.addEventListener("click", functionName);</code>
                        You can only add a single "onclick" but there can be multiple "click" event listeners.
                    </li>
                    <li>When you do something like:
                        <code class="block">btn.addEventListener("click", function (e) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;console.log(e);<br>
                            });</code>
                        The event is passed to the function. The Event object has some useful functions.
                    </li>
                </ul>

                <!-- Object Basics -->
                <h3>Object Basics</h3>

                <ul>
                    <li>Objects seem to work slightly more fluidly than in other languages I've learned. They're made of key, value pairs and I can seem to just make them on the fly.
                        <code class="block">let user = {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;name: "Cory",<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;age: 38<br>
                        };</code>
                    </li>
                    <li>I can add a property just by using dot notation? <code>user.isAdmin = true;</code> or remove a property by using <code>delete user.age;</code></li>
                    <li>Can have multi-word properties like:
                        <code class="block">let user = {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;name: "Cory",<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;"likes birds": true<br>
                        };</code>
                        And access it like so:
                        <code class="block">user["likes birds"] = false;<br>
                            let key = "likes birds";<br>
                            user[key] = true;
                        };</code></li>
                    <li>It seems like as long as anything within the square brackets resolves into a string you can use it for object key names.
                        <code class="block">let fruit = "apple";<br>
                            let bag = {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;[fruit + "Computers"]: 5<br>
                            };<br>
                            (bag.appleComputers == 5) // true</code></li>
                    <li>There is also an object constructor and a shorthand for using it to make objects quickly. This is what it looks like by default:
                        <code class="block">function makeUser(name, age) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;return {<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: name,<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age: age<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;};<br>
                            }<br>
                            let user = makeUser("John", 30);<br>
                            (user.name === "John"); // true</code>
                        Here's what you can shorten it to:
                        <code class="block">function makeUser(name, age) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;return {<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name, // same thing as "name:name"<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age // same thing as "age:age"<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;};<br>
                            }</code>
                        Or, say:
                        <code class="block">let name = "Joe";<br>
                            let user = {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;name, // again, same as "name:name"<br>
                                &nbsp;&nbsp;&nbsp;&nbsp;age: 30 // so you can combine them<br>
                            }</code></li>
                    <li>Property names can be dumb things like <code>for, let, return</code> and that won't break anything.</li>
                    <li>As an aside, other types for names are converted into strings. For example:
                        <code class="block">let obj = {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;0: "test" //same as "0": "test<br>
                            }<br>
                            (obj["0"] === "test"); // true<br>
                            (obj[0] === "test"); // true, 0 is converted to "0"</code></li>
                    <li>Make sure a property uses the keyword "in": <code>if ("keyName" in objectName) {}</code>. Checking for <code>undefined</code> <em>kind of</em> works unless that data can be undefined in a valid way.</li>
                    <li>The for..in loop is useful (I'm thinking of it like a for-each loop).
                        <code class="block">let user = {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;name: "Cory",<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;age: 38<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;isAdmin: true<br>
                        };<br>
                        for (let key in user) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;alert( key ); // name, age, isAdmin<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;alert( user[key] ); // "Cory", 38, true<br>
                        }
                        </code></li>
                    <li>What order are the properties in? Integer properties are sorted but others appear in creation order. If you want to "cheat" a common way is to put a "+" infront of the numbers, <code>"+49":"Germany"</code>(think area codes in this example) and refer to it later with, say:
                    <code>for (let code in codes) {<br>
                        &nbsp;&nbsp;&nbsp;&nbsp;alert( +code );<br>
                    }</code>
                    See the "Ordered Like an Object" section of <a href="https://javascript.info/object">this page</a> for further reference.</li>
                    <li>Object references are basically like pointers. Even if you assign it to another variable both will be pointing to the same object.</li>
                </ul>

                <!-- Intermediate/advanced array magic -->
                <h3>Intermediate/advanced array magic</h3>

                <ul>
                    <li>There are a few, key tools for going through functions. <code>map, filter, reduce</code> that all take "callback" functions.</li>
                    <li>A <code>map</code> is a useful tool for applying a function to each element of an array.
                        <code class="block">function addOne(num) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;return num + 1;<br>
                            }<br>
                            const arr = [1, 2, 3, 4, 5];<br>
                            const mappedArr = arr.map(addOne);<br>
                            console.log(mappedArr); // Outputs [2, 3, 4, 5, 6]</code>
                        It returns a new array with the modified values and leave the original array unchanged.
                    </li>
                    <li>There's also a <code>filter</code>:
                        <code class="block">function isOdd(num) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;return num % 2 !== 0;<br>
                            }<br>
                            const arr = [1, 2, 3, 4, 5];<br>
                            const oddNums = arr.filter(isOdd);<br>
                            console.log(oddNums); // Outputs [1, 3, 5];</code>
                        Like a map, it also returns a new array and leaves the original array intact.
                    </li>
                    <li><code>reduce</code> is similar to map and filter in that it goes through an array, but it's for accumulating, say, a total value from all the values in the array. A reduce is passed two values: first, the callback function and second, the total to start at.
                    <code class="block">const arr = [1, 2, 3, 4, 5];<br>
                        const productOfAllNums = arr.reduce((total, currentItem) => {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;return total * currentItem;<br>
                        }, 1);<br>
                        console.log(productOfAllNums); // Outputs 120;
                    </code></li>
                    <li>So I guess at the end of the day a <code>map</code> function returns a value to be placed in the new array, a <code>filter</code> function returns a boolean to decide if the old value is passed into the new array and a <code>reduce</code> processes all values together.
                    </li>
                    <li>The example the Odin project gives starts with an array of sandwich ingredients (bread, meat, lettuce, pickles). <code>filter</code> removes ingredients you don't want (pickles), <code>map</code> prepares up the ingredients (cuts up the meat, lettuce and bread) and <code>reduce</code> combines them all into a sandwich.</li>
                    <li>Combined, this code:
                        <code class="block">function sumOfTripledEvens(array) {<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;return array<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.filter((num) => num % 2 === 0)<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.map((num) => num * 3)<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.reduce((acc, curr) => acc + curr);<br>
                          }</code>
                        sumOfTripledEvens takes an array of numbers, removes odd ones, triples every value and returns the sum of all tripled, even values.
                    </li>
                </ul>
            </div> <!-- /section-content -->
        </div> <!-- /section : Javascript Basics-->
    </div> <!-- /main-content -->
</body>
</html>